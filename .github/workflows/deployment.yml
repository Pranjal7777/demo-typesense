name: Pipeline for Image Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: website-service                
  ECR_REGISTRY: 905418471327.dkr.ecr.us-west-2.amazonaws.com   
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Export Environment Variables for Next.js
        run: |
          echo "NEXT_PUBLIC_API_URL_VERSION=${{ secrets.NEXT_PUBLIC_API_URL_VERSION }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BASE_API_URL=${{ secrets.NEXT_PUBLIC_BASE_API_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BASE_WEB_URL=${{ secrets.NEXT_PUBLIC_BASE_WEB_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FACEBOOK_SDK_KEY=${{ secrets.NEXT_PUBLIC_FACEBOOK_SDK_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_APP_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_GOOGLE_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_API_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_GUMLET_API_URL=${{ secrets.NEXT_PUBLIC_GUMLET_API_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_MQTT_SOCKET_URL=${{ secrets.NEXT_PUBLIC_MQTT_SOCKET_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_MQTT_PASSWORD=${{ secrets.NEXT_PUBLIC_MQTT_PASSWORD }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_MQTT_USER=${{ secrets.NEXT_PUBLIC_MQTT_USER }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_MQTT_WEBSOCKET_PORT=${{ secrets.NEXT_PUBLIC_MQTT_WEBSOCKET_PORT }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SERVER_PORT=${{ secrets.NEXT_PUBLIC_SERVER_PORT }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_STRAPI_BASE_URL=${{ secrets.NEXT_PUBLIC_STRAPI_BASE_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TYPESENSE_HOST=${{ secrets.NEXT_PUBLIC_TYPESENSE_HOST }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TYPESENSE_PORT=${{ secrets.NEXT_PUBLIC_TYPESENSE_PORT }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TYPESENSE_PROTOCOL=${{ secrets.NEXT_PUBLIC_TYPESENSE_PROTOCOL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TYPESENSE_API_KEY=${{ secrets.NEXT_PUBLIC_TYPESENSE_API_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TYPESENSE_CONNECTION_TIMEOUT=${{ secrets.NEXT_PUBLIC_TYPESENSE_CONNECTION_TIMEOUT }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm install

      - name: Build Next.js Application
        run: npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    outputs:
      image: ${{ steps.build-image.outputs.image }}
